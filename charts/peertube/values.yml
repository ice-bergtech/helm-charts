## Peertube configuration
## Ref: https://github.com/ice-bergtech/helm-charts
## Ref: https://github.com/Chocobozzz/PeerTube

# -- Provide a name in place of `peertube`
name: 'peertube'

# -- Override the namespace
# @default -- `peertube`
namespace: "peertube"
# Override APIVersions
# If you want to template helm charts but cannot access k8s API server
# you can set api versions here
apiVersionOverrides: {}

strategy: 'type: Recreate'

# Redis server for short time storage
redis:
  enabled: true
  name: redis
  image:
    repository: redis
    tag: 6-alpine
  containerPorts:
    redis: 6379
    sentinal: 26379
  sentinal:
    enabled: false
    tls: false
    master_name: ''
  service:
    labels:
    # -- one of: ClusterIP | LoadBalancer | NodePort
    type: ClusterIP 
    annotations:
    servicePortHttpName: redis
    servicePortHttp: 6379
    servicePortSentinelName: sentinal
    servicePortSentinel: 26379
    sentinelHostname: ''
    nodePortHttp: ''

database:
  enabled: true
  name: postgres
  image:
    repository:
    tag:
  containerPorts:
    db: 5432
  service:
    labels:
    # -- one of: ClusterIP | LoadBalancer | NodePort
    type: ClusterIP 
    annotations:
    servicePortHttpName: db
    servicePortHttp: 5432
    nodePortHttp: ''


selectorLabels: []
webserver:
  https: false
  hostname: 'peertube.local'
  port: 80



## Peertube Configs
## Ref: https://github.com/Chocobozzz/PeerTube/blob/develop/config/production.yaml.example
peertube:
  name: peertube
  replicas: 1
  containerPorts:
    webgui: 9000
    stream: 1935
  service:
    labels:
    annotations:
    servicePortHttpName: 'webgui'
    servicePortHttp: 9000
    servicePortLiveName: 'stream'
    servicePortLive: 1935
    # -- one of: ClusterIP | LoadBalancer | NodePort
    type: ClusterIP
    externalIPs: ''
    externalTrafficPolicy: ''
    loadBalancerClass: ''
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePortHttp: ''
    # -- either: None | ClientIP
    sessionAffinity: 'None'
  image: 
    repository: 'Chocobozzz/PeerTube'
    image: 'v6.3.2-bookworm'

live:
  enabled: false
  # PeerTube makes many small requests to the object storage provider to upload/delete/update live chunks
  # which can be a problem depending on your object storage provider
  # You can also choose to disable this feature to reduce live streams latency
  # Live stream replays are not affected by this setting, so they are uploaded in object storage as regular VOD videos
  store_live_streams: true

log:
  level: 'info' # 'debug' | 'info' | 'warn' | 'error'
  rotation:
    enabled: true # Enabled by default, if disabled make sure that 'storage.logs' is pointing to a folder handled by logrotate
    max_file_size: 12MB
    max_files: 20
  anonymize_ip: true
  log_ping_requests: true
  log_tracker_unknown_infohash: true

  # If you have many concurrent requests, you can disable HTTP requests logging to reduce PeerTube CPU load
  log_http_requests: true

  prettify_sql: false

  # Accept warn/error logs coming from the client
  accept_client_log: true

metrics:
  open_telemetry:
    enabled: false

    # How often viewers send playback stats to server
    playback_stats_interval: '15 seconds'

    http_request_duration:
      # You can disable HTTP request duration metric that can have a high tag cardinality
      enabled: false

    # Create a prometheus exporter server on this port so prometheus server can scrape PeerTube metrics
    prometheus_exporter:
      hostname: '127.0.0.1'
      port: 9091

  stats:
    enabled: false
  geo_ip:
    enabled: false
    country_db_url: 'https://dbip.mirror.framasoft.org/files/dbip-country-lite-latest.mmdb'
    city_db_url: 'https://dbip.mirror.framasoft.org/files/dbip-city-lite-latest.mmdb'


s3:
  enabled: false
  # Without protocol, will default to HTTPS
  # Your S3 provider must support virtual hosting of buckets as PeerTube doesn't support path style requests
  # 's3.amazonaws.com' or 's3.fr-par.scw.cloud' for example
  endpoint: ''
  region: 'us-east-1'
  # If this is set to a bucket name, that bucket will be used by all bucket types
  # The buckets.*.bucket_name will be used as a folder prefix.
  single_bucket: ''
  buckets:
    enabled: false
    streaming_playlists:
      bucket_name: 'streaming-playlists'

      # Allows setting all buckets to the same value but with a different prefix
      prefix: '' # Example: 'streaming-playlists:'

      # Base url for object URL generation, scheme and host will be replaced by this URL
      # Useful when you want to use a CDN/external proxy
      base_url: '' # Example: 'https://mirror.example.com'

    web_videos:
      bucket_name: 'web-videos'
      prefix: ''
      base_url: ''

    user_exports:
      bucket_name: 'user-exports'
      prefix: ''
      base_url: ''

    # Same settings but for original video files
    original_video_files:
      bucket_name: 'original-video-files'
      prefix: ''
      base_url: ''
  credentials:
    # You can also use AWS_ACCESS_KEY_ID env variable
    access_key_id: ''
    # You can also use AWS_SECRET_ACCESS_KEY env variable
    secret_access_key: ''
  
  # Maximum amount to upload in one request to object storage
  max_upload_part: '100MB'
  # Maximum number of attempts to make a request to object storage
  # Some object storage providers (for instance Backblaze) expects the client to retry upload upon 5xx errors
  # If you're using such a provider then you can increase this value
  max_request_attempts: 3
  upload_acl:
    # Set this ACL on each uploaded object of public/unlisted videos
    # Use null if your S3 provider does not support object ACL
    public: 'public-read'
    # Set this ACL on each uploaded object of private/internal videos
    # PeerTube can proxify requests to private objects so your users can access them
    # Use null if your S3 provider does not support object ACL
    private: 'private'
  # If private files (private/internal video files) have a private ACL, users can't access directly the resource
  # PeerTube can proxify requests between your object storage service and your users
  # If you disable PeerTube proxy, ensure you use your own proxy that is able to access the private files
  # Or you can also set a public ACL for private files in object storage if you don't want to use a proxy
  proxy_private_files: true
# Instance Configuration
instance:
  # -- Short description of server
  short_description: ''
  # -- Long Description of server
  description: ''
  admin_email: 'admin@example.com'
  # -- If server is NSFW
  is_nsfw: false
  # -- NSFW default policy
  default_nsfw_policy: do_not_list
  # -- Legal Terms
  terms: 'No terms for now.'
  # -- Code of Conduct
  code_of_conduct: ''
  # -- Reason for server creation
  creation_reason: ''
  # -- Information about moderation policies
  moderation_information: ''
  # -- Primary administrator
  administrator: ''
  # -- Log of instance maintenance
  maintenance_lifetime: ''
  # -- Instance business model
  business_model: ''
  # -- Instance hardware info
  hardware_information: ''
  # -- Video Categories
  categories: []
  languages: []
  # -- Default client route
  default_client_route: "/videos/trending"
  # -- Default instance theme
  default_theme: 'dark'
  # Cards configuration to format video in Twitter/X
  # All other social media (Facebook, Mastodon, etc.) are supported out of the box
  # Indicates the Twitter/X account for the website or platform where the content was published
  # This is just an information injected in HTML that is required by Twitter/X
  twitter_username: '@Chocobozzz'
  followers:
    # Allow or not other instances to follow yours
    enabled: true
    # Whether or not an administrator must manually validate a new follower
    manual_approval: false
  followings:
    # If you want to automatically follow back new instance followers
    # If this option is enabled, use the mute feature instead of deleting followings
    # /!\ Don't enable this if you don't have a reactive moderation team /!\
    auto_follow_back:
      enabled: false
    # If you want to automatically follow instances of the public index
    # If this option is enabled, use the mute feature instead of deleting followings
    # /!\ Don't enable this if you don't have a reactive moderation team /!\
    auto_follow_index:
      enabled: false
      # Host your own using https://framagit.org/framasoft/peertube/instances-peertube#peertube-auto-follow
      index_url: ''

  broadcast_message:
    enabled: false
    message: ''
    level: 'info'
    dismissable: false


  # Service Links
  services: |
    # Cards configuration to format video in Twitter/X
    # All other social media (Facebook, Mastodon, etc.) are supported out of the box
    twitter:
      # Indicates the Twitter/X account for the website or platform where the content was published
      # This is just an information injected in HTML that is required by Twitter/X
      username: '@Chocobozzz'
  # -- Cache Settings
  cache: |
    previews:
      size: 50
    captions:
      size: 50
    torrents:
      size: 50
  # Signup settings
  signup: |
    enabled: false
    limit: 10
    requires_email_verification: false
    minimum_age: 16
  # Import Settings
  import: |
    videos:
      concurrency: 1
      http:
        enabled: false
      torrent:
        enabled: false
    video_channel_synchronization:
      enabled: false
  trending:
    videos:
      algorithms:
        enabled:
        - hot
        - most-viewed
        - most-liked
        default: most-viewed
  admin.email: ''
  contact_form.enabled: false
  user:
    video_quota: -1
    video_quota_daily: -1
    max_channels: 20
  # -- Transcoding settings 
  transcoding: |
    enabled: true
    threads: 1
    allow_additional_extensions: true
    allow_audio_files: true
    profile: default
    concurrency: 1
    resolutions:
      0p: false
      144p: false
      240p: false
      360p: false
      480p: false
      720p: false
      1080p: false
      1440p: false
      2160p: false
    always_transcode_original_resolution: true
    hls:
      enabled: true
    webtorrent:
      enabled: false
  # -- Search configuration
  search: |
    # Add ability to fetch remote videos/actors by their URI, that may not be federated with your instance
    # If enabled, the associated group will be able to "escape" from the instance follows
    # That means they will be able to follow channels, watch videos, list videos of non followed instances
    remote_uri:
      users: true
      anonymous: false

    # Use a third party index instead of your local index, only for search results
    # Useful to discover content outside of your instance
    # If you enable search_index, you must enable remote_uri search for users
    # If you do not enable remote_uri search for anonymous user, your instance will redirect the user on the origin instance
    # instead of loading the video locally
    search_index:
      enabled: false
      # URL of the search index, that should use the same search API and routes
      # than PeerTube: https://docs.joinpeertube.org/api-rest-reference.html
      # You should deploy your own with https://framagit.org/framasoft/peertube/search-index,
      # and can use https://search.joinpeertube.org/ for tests, but keep in mind the latter is an unmoderated search index
      url: ''
      # You can disable local search in the client, so users only use the search index
      disable_local_search: false
      # If you did not disable local search in the client, you can decide to use the search index by default
      is_default_search: false
  secrets:
    peertube: ''

########################################

instance:
  name: 'PeerTube'
  short_description: 'PeerTube, an ActivityPub-federated video streaming platform using P2P directly in your web browser.'
  description: 'Welcome to this PeerTube instance!'
  terms: 'No terms for now.' 
  code_of_conduct: '' 
  moderation_information: '' 
  creation_reason: '' 
  administrator: '' 
  maintenance_lifetime: '' 
  business_model: '' 
  hardware_information: ''
  # New videos automatically blacklisted so moderators can review before publishing
  auto_blacklist: false

users:
  enabled: true

video_channel_synchronization:
  enabled: false
  max_per_user: 10
  check_interval: '1h'
  videos_limit_per_synchronization: 10
  full_sync_videos_limit: 1000

dlp:
  force_ipv4: false

export:
  users:
    # Allow users to export their PeerTube data in a .zip for backup or re-import
    # Only one export at a time is allowed per user
    enabled: true
    # Max size of the current user quota to accept or not the export
    # Goal of this setting is to not store too big archive file on your server disk
    max_user_video_quota: '10GB'
    # How long PeerTube should keep the user export
    export_expiration: '2d'

services:
  twitter:
    username: 

followings:
  instance:
    auto_follow_back:
      enabled: false
    auto_follow_index:
      enabled: false
      index_url: ''

theme:
  default: 'default'



search:
  remote_uri:
    users: true
    anonymous: false
  search_index:
    enabled: false
    url: ''
    disable_local_search: false
    is_default_search: false

client:
  videos:
    miniature:
      prefer_author_display_name: false
      display_author_avatar: false

  menu:
    login:
      redirect_on_single_external_auth: false

storyboards:
  enabled: true
